import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { IntegrationName } from "../integrations/integrationTypes";
import { integrations } from "../integrations/integrations";
import Selection from "../components/Selection";
import IntegrationModal from "../components/IntegrationModal";
import { ToastContainer } from "react-toastify";

const Home: NextPage = () => {
    const [selectedModalOpen, setSelectedModalOpen] = useState(IntegrationName.NONE);
    const [isModalOpen, setIsModalOpen] = useState(false);

    const closeModal: () => void = () => {
        setIsModalOpen(false);
        setSelectedModalOpen(IntegrationName.NONE);
    };

    let selectedIntegration = integrations.filter((value, index) => {
        return value.id === selectedModalOpen;
    });

    return (
        <div className={styles.container}>
            <Head>
                <title>Blinq • Integrations</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <ToastContainer />

            <main className={styles.main}>
                <h1 className={styles.title}>Blinq</h1>
                <p className={styles.description}>Manage your integrations here</p>

                <div className="selections">
                    {integrations.map((integration, index) => {
                        return (
                            <Selection
                                key={index}
                                selection={integration.data.selectionConfig}
                                integrationStatus={integration.data.integrationStatus}
                                onButtonClick={() => {
                                    setSelectedModalOpen(integration.id);
                                    setIsModalOpen(true);
                                }}
                            />
                        );
                    })}
                </div>

                {isModalOpen && selectedModalOpen !== IntegrationName.NONE && (
                    <IntegrationModal
                        open={isModalOpen}
                        closeModal={closeModal}
                        config={selectedIntegration[0].data.modalConfig}
                        integrationStatus={selectedIntegration[0].data.integrationStatus}
                    ></IntegrationModal>
                )}
            </main>
        </div>
    );
};

export default Home;
